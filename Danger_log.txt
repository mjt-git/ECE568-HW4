{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww14300\viewh10760\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf0 hw4 danger log\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}After server finishes working and quits, the client will not quit. We need to manually press ctrl-C to quit the client side. The reason is that in order to saturate server, we wrap the connection of client to server inside a while loop. In that case, even the server stops working, client threads will keep trying to connect.\
\ls1\ilvl0{\listtext	2.	}We could have only locked one bucket when operating on it, which can reduce the blocking time, compared with locking whole vector. Such a decrement would improve performance.\
\ls1\ilvl0{\listtext	3.	}When using the variable \'93reqCount\'94 to count the number of request from client, we used a lock to avoid race condition. However, we could also use atomic operation to increase this variable, which will reduce the overhead caused by mutex lock.\
\ls1\ilvl0{\listtext	4.	}When dealing with the vector that represent buckets, we passed a reference of vector instead of passing a copy. Such operation can reduce the overhead, compared with dealer the vector as a global variable.\
\ls1\ilvl0{\listtext	5.	}We can also improve our code by using smarter pointer or lck_guard, which comply to RAII.\
}